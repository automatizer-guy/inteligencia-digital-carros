import re
import json
from typing import Optional, List, Dict, Tuple
from datetime import datetime

class DetectorA√±oInteligente:
    """
    Sistema inteligente que aprende patrones de las correcciones manuales
    """
    
    def __init__(self):
        self.correcciones = {}  # Correcciones exactas originales
        self.patrones_aprendidos = {}  # Patrones extra√≠dos autom√°ticamente
        
    def cargar_correcciones(self, archivo_correcciones: str):
        """Carga correcciones y extrae patrones autom√°ticamente"""
        try:
            with open(archivo_correcciones, 'r', encoding='utf-8') as f:
                self.correcciones = json.load(f)
            
            # Extraer patrones de las correcciones existentes
            self._extraer_patrones_automaticamente()
            
        except FileNotFoundError:
            self.correcciones = {}
            self.patrones_aprendidos = {}
    
    def _extraer_patrones_automaticamente(self):
        """
        ‚ú® MAGIA: Extrae patrones autom√°ticamente de las correcciones
        """
        print("üß† Extrayendo patrones de correcciones existentes...")
        
        patrones_por_modelo = {}
        
        for texto_correccion, a√±o in self.correcciones.items():
            # Identificar modelo en el texto
            modelo = self._identificar_modelo(texto_correccion)
            if not modelo:
                continue
                
            if modelo not in patrones_por_modelo:
                patrones_por_modelo[modelo] = []
            
            # Extraer contexto del a√±o en la correcci√≥n
            patron = self._extraer_patron_contexto(texto_correccion, a√±o)
            if patron:
                patrones_por_modelo[modelo].append({
                    'patron': patron,
                    'a√±o_ejemplo': a√±o,
                    'texto_original': texto_correccion
                })
        
        # Generar patrones inteligentes
        for modelo, datos in patrones_por_modelo.items():
            self.patrones_aprendidos[modelo] = self._generar_patrones_modelo(datos)
        
        self._mostrar_patrones_aprendidos()
    
    def _identificar_modelo(self, texto: str) -> Optional[str]:
        """Identifica qu√© modelo de auto est√° en el texto"""
        modelos = ['yaris', 'civic', 'corolla', 'sentra', 'cr-v', 'crv', 'rav4', 'accent', 'swift', 'alto']
        
        for modelo in modelos:
            if modelo in texto.lower():
                return modelo
        return None
    
    def _extraer_patron_contexto(self, texto: str, a√±o: int) -> Optional[Dict]:
        """
        Extrae el patr√≥n de c√≥mo aparece el a√±o en el contexto
        """
        a√±o_str = str(a√±o)
        a√±o_corto = str(a√±o)[2:]  # 07, 08, 09, etc.
        
        # Buscar diferentes formatos del a√±o en el texto
        patrones_encontrados = []
        
        # Patr√≥n 1: "modelo XX" donde XX es a√±o corto
        if re.search(rf'modelo\s+{a√±o_corto}\b', texto, re.IGNORECASE):
            patrones_encontrados.append({
                'tipo': 'modelo_a√±o_corto',
                'formato': f'modelo {a√±o_corto}',
                'a√±o_completo': a√±o,
                'a√±o_corto': a√±o_corto
            })
        
        # Patr√≥n 2: "del YYYY" donde YYYY es a√±o completo
        if re.search(rf'del\s+{a√±o_str}\b', texto, re.IGNORECASE):
            patrones_encontrados.append({
                'tipo': 'del_a√±o_completo', 
                'formato': f'del {a√±o_str}',
                'a√±o_completo': a√±o,
                'a√±o_corto': a√±o_corto
            })
        
        # Patr√≥n 3: "a√±o YYYY"
        if re.search(rf'a√±o\s+{a√±o_str}\b', texto, re.IGNORECASE):
            patrones_encontrados.append({
                'tipo': 'a√±o_completo',
                'formato': f'a√±o {a√±o_str}',
                'a√±o_completo': a√±o,
                'a√±o_corto': a√±o_corto
            })
        
        # Patr√≥n 4: Solo a√±o corto al final
        if re.search(rf'\b{a√±o_corto}$', texto):
            patrones_encontrados.append({
                'tipo': 'a√±o_corto_final',
                'formato': a√±o_corto,
                'a√±o_completo': a√±o,
                'a√±o_corto': a√±o_corto
            })
        
        return patrones_encontrados[0] if patrones_encontrados else None
    
    def _generar_patrones_modelo(self, datos_modelo: List[Dict]) -> Dict:
        """
        Genera patrones inteligentes para un modelo espec√≠fico
        """
        patrones = {
            'modelo_a√±o_corto': [],
            'del_a√±o_completo': [],
            'a√±o_completo': [],
            'a√±o_corto_final': []
        }
        
        for dato in datos_modelo:
            if dato['patron']:
                tipo = dato['patron']['tipo']
                if tipo in patrones:
                    patrones[tipo].append(dato['patron'])
        
        return patrones
    
    def detectar_a√±o_inteligente(self, texto: str, debug: bool = False) -> Optional[int]:
        """
        üöÄ DETECCI√ìN INTELIGENTE: Combina correcciones exactas + patrones aprendidos
        """
        texto_original = texto
        texto_norm = self._normalizar_texto(texto)
        
        if debug:
            print(f"üîç Analizando: '{texto[:50]}...'")
        
        # 1. B√∫squeda exacta en correcciones (como antes)
        coincidencia_exacta = self._busqueda_exacta(texto_norm)
        if coincidencia_exacta:
            if debug:
                print(f"‚úÖ Coincidencia exacta: {coincidencia_exacta}")
            return coincidencia_exacta
        
        # 2. üß† NUEVO: B√∫squeda por patrones aprendidos
        modelo = self._identificar_modelo(texto)
        if modelo and modelo in self.patrones_aprendidos:
            a√±o_patron = self._aplicar_patrones_modelo(texto, modelo, debug)
            if a√±o_patron:
                if debug:
                    print(f"üéØ Detectado por patr√≥n: {a√±o_patron}")
                return a√±o_patron
        
        # 3. B√∫squeda parcial mejorada (como propuse antes)
        a√±o_parcial = self._busqueda_parcial(texto_norm, debug)
        if a√±o_parcial:
            if debug:
                print(f"üîç Detectado por b√∫squeda parcial: {a√±o_parcial}")
            return a√±o_parcial
        
        if debug:
            print("‚ùå No se detect√≥ a√±o")
        return None
    
    def _aplicar_patrones_modelo(self, texto: str, modelo: str, debug: bool = False) -> Optional[int]:
        """
        ‚ú® APLICA PATRONES APRENDIDOS para detectar a√±os
        """
        patrones = self.patrones_aprendidos.get(modelo, {})
        
        # Intentar cada tipo de patr√≥n
        for tipo_patron, lista_patrones in patrones.items():
            if not lista_patrones:
                continue
                
            a√±o_detectado = self._aplicar_patron_tipo(texto, tipo_patron, debug)
            if a√±o_detectado:
                return a√±o_detectado
        
        return None
    
    def _aplicar_patron_tipo(self, texto: str, tipo_patron: str, debug: bool = False) -> Optional[int]:
        """
        Aplica un tipo espec√≠fico de patr√≥n
        """
        a√±o_actual = datetime.now().year
        
        if tipo_patron == 'modelo_a√±o_corto':
            # Buscar "modelo XX" donde XX puede ser cualquier a√±o de 2 d√≠gitos
            match = re.search(r'modelo\s+(\d{2})\b', texto, re.IGNORECASE)
            if match:
                a√±o_corto = int(match.group(1))
                a√±o_completo = 2000 + a√±o_corto if a√±o_corto <= 25 else 1900 + a√±o_corto
                if 1980 <= a√±o_completo <= a√±o_actual + 1:
                    if debug:
                        print(f"  üéØ Patr√≥n 'modelo XX': {match.group(1)} ‚Üí {a√±o_completo}")
                    return a√±o_completo
        
        elif tipo_patron == 'del_a√±o_completo':
            # Buscar "del YYYY"
            match = re.search(r'del\s+(\d{4})\b', texto, re.IGNORECASE)
            if match:
                a√±o = int(match.group(1))
                if 1980 <= a√±o <= a√±o_actual + 1:
                    if debug:
                        print(f"  üéØ Patr√≥n 'del YYYY': {a√±o}")
                    return a√±o
        
        elif tipo_patron == 'a√±o_completo':
            # Buscar "a√±o YYYY"
            match = re.search(r'a√±o\s+(\d{4})\b', texto, re.IGNORECASE)
            if match:
                a√±o = int(match.group(1))
                if 1980 <= a√±o <= a√±o_actual + 1:
                    if debug:
                        print(f"  üéØ Patr√≥n 'a√±o YYYY': {a√±o}")
                    return a√±o
        
        elif tipo_patron == 'a√±o_corto_final':
            # Buscar a√±o de 2 d√≠gitos al final
            match = re.search(r'\b(\d{2})$', texto.strip())
            if match:
                a√±o_corto = int(match.group(1))
                a√±o_completo = 2000 + a√±o_corto if a√±o_corto <= 25 else 1900 + a√±o_corto
                if 1980 <= a√±o_completo <= a√±o_actual + 1:
                    if debug:
                        print(f"  üéØ Patr√≥n 'XX final': {match.group(1)} ‚Üí {a√±o_completo}")
                    return a√±o_completo
        
        return None
    
    def _normalizar_texto(self, texto: str) -> str:
        """Normaliza texto para b√∫squedas"""
        texto = texto.lower().strip()
        texto = re.sub(r'[üî•‚úÖüí•üöòüî∞‚ö†Ô∏èü•∂]', '', texto)
        texto = re.sub(r'\s+', ' ', texto)
        return texto
    
    def _busqueda_exacta(self, texto_norm: str) -> Optional[int]:
        """B√∫squeda exacta en correcciones"""
        return self.correcciones.get(texto_norm)
    
    def _busqueda_parcial(self, texto_norm: str, debug: bool = False) -> Optional[int]:
        """B√∫squeda parcial como propuse antes"""
        # Implementaci√≥n similar a la funci√≥n anterior...
        return None
    
    def _mostrar_patrones_aprendidos(self):
        """Muestra los patrones que se aprendieron"""
        print(f"\nüß† PATRONES APRENDIDOS DE {len(self.correcciones)} CORRECCIONES:")
        
        for modelo, patrones in self.patrones_aprendidos.items():
            print(f"\nüì± {modelo.upper()}:")
            for tipo, lista in patrones.items():
                if lista:
                    print(f"  ‚úÖ {tipo}: {len(lista)} ejemplos")
                    for ejemplo in lista[:2]:  # Mostrar 2 ejemplos
                        print(f"    ‚Üí '{ejemplo.get('formato', 'N/A')}'")
    
    def agregar_correccion(self, texto: str, a√±o: int):
        """Agrega nueva correcci√≥n y re-aprende patrones"""
        texto_norm = self._normalizar_texto(texto)
        self.correcciones[texto_norm] = a√±o
        
        # Re-extraer patrones con la nueva correcci√≥n
        self._extraer_patrones_automaticamente()
        
        print(f"‚úÖ Correcci√≥n agregada y patrones actualizados: '{texto[:30]}...' ‚Üí {a√±o}")

# EJEMPLO DE USO
def ejemplo_sistema_inteligente():
    """
    Demuestra c√≥mo funcionar√≠a el sistema inteligente
    """
    detector = DetectorA√±oInteligente()
    
    # Simular correcciones existentes
    correcciones_ejemplo = {
        "toyota yaris modelo 07": 2007,
        "honda civic modelo 96": 1996, 
        "toyota yaris del 2010": 2010,
        "honda civic a√±o 2015": 2015,
        "suzuki swift 08": 2008
    }
    
    # Cargar correcciones simuladas
    detector.correcciones = correcciones_ejemplo
    detector._extraer_patrones_automaticamente()
    
    # Probar casos nuevos
    casos_prueba = [
        "Toyota yaris modelo 09",  # ‚úÖ Deber√≠a detectar 2009 (patr√≥n aprendido)
        "Honda civic modelo 03",   # ‚úÖ Deber√≠a detectar 2003 (patr√≥n aprendido)  
        "Toyota yaris del 2012",   # ‚úÖ Deber√≠a detectar 2012 (patr√≥n aprendido)
        "Suzuki swift 11",         # ‚úÖ Deber√≠a detectar 2011 (patr√≥n aprendido)
        "Toyota corolla modelo 05" # ‚ùì Modelo nuevo, pero patr√≥n conocido
    ]
    
    print("\nüß™ PRUEBAS DEL SISTEMA INTELIGENTE:")
    print("="*50)
    
    for caso in casos_prueba:
        print(f"\nüì± Caso: '{caso}'")
        resultado = detector.detectar_a√±o_inteligente(caso, debug=True)
        if resultado:
            print(f"  ‚úÖ RESULTADO: {resultado}")
        else:
            print(f"  ‚ùå No detectado")

if __name__ == "__main__":
    ejemplo_sistema_inteligente()
