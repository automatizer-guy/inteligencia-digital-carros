name: Ejecutar Bot Automatizado

on:
  schedule:
    # Corre cada 2 horas entre 8 AM y 6 PM (UTC-6 Guatemala)
    - cron: '0 14-23/2 * * *'
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      CHAT_ID: ${{ secrets.CHAT_ID }}
      FB_COOKIES_JSON: ${{ secrets.FB_COOKIES_JSON }}
      DB_PATH: upload-artifact/anuncios.db
      HEADLESS: 'true'  # Modo headless activado

    steps:
      # 1Ô∏è‚É£ Configuraci√≥n inicial
      - name: Checkout repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Configurar cach√© para Playwright
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 3Ô∏è‚É£ Manejo de la base de datos
      - name: Configurar base de datos
        run: |
          mkdir -p upload-artifact
          if [ -f data/anuncios.db ]; then
            cp data/anuncios.db "$DB_PATH"
            echo "‚úÖ Base hist√≥rica cargada (Tama√±o: $(du -h $DB_PATH | cut -f1))"
          else
            echo "::warning::No hay base previa. Se inicia nueva"
            touch "$DB_PATH"
          fi

      # 4Ô∏è‚É£ Inicializaci√≥n de la estructura de la DB
      - name: Inicializar estructura DB
        run: |
          sudo apt-get update && sudo apt-get install -y sqlite3
          
          # Script SQL completo en una sola transacci√≥n
          sqlite3 "$DB_PATH" <<EOF
          BEGIN;
          CREATE TABLE IF NOT EXISTS anuncios (
            link TEXT PRIMARY KEY,
            modelo TEXT,
            anio INTEGER,
            precio INTEGER,
            km TEXT,
            fecha_scrape DATE DEFAULT CURRENT_DATE,
            roi REAL,
            score INTEGER,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            relevante BOOLEAN DEFAULT 0,
            confianza_precio TEXT CHECK(confianza_precio IN ('baja', 'media', 'alta')) DEFAULT 'baja',
            muestra_precio INTEGER DEFAULT 0
          );
          CREATE INDEX IF NOT EXISTS idx_modelo ON anuncios(modelo);
          CREATE INDEX IF NOT EXISTS idx_fecha ON anuncios(fecha_scrape);
          COMMIT;
          EOF
          
          echo "‚úÖ Estructura de DB verificada"

      # 5Ô∏è‚É£ M√©tricas iniciales
      - name: Obtener m√©tricas iniciales
        id: db_metrics
        run: |
          echo "üìä Obteniendo m√©tricas iniciales..."
          TOTAL=$(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM anuncios;")
          MODELOS=$(sqlite3 "$DB_PATH" "SELECT modelo, COUNT(*) FROM anuncios GROUP BY modelo ORDER BY COUNT(*) DESC LIMIT 5;" | tr '|' ':')
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "modelos=$MODELOS" >> $GITHUB_OUTPUT
          echo "üìã Total inicial: $TOTAL"
          echo "üèÜ Top modelos: $MODELOS"

      # 6Ô∏è‚É£ Instalaci√≥n de dependencias optimizada
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          playwright install --with-deps chromium

      # 7Ô∏è‚É£ Ejecuci√≥n del bot con manejo de errores
      - name: Ejecutar bot de scraping
        id: run_bot
        run: |
          set +e
          python -u bot_telegram_marketplace.py 2>&1 | tee -a resultado.log
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
          
          # Procesar resultados
          NUEVOS=$(grep -oP 'NUEVOS=\K\d+' resultado.log || echo 0)
          ACTUALIZADOS=$(grep -oP 'ACTUALIZADOS=\K\d+' resultado.log || echo 0)
          ERRORES=$(grep -ci "ERROR\|FAILED" resultado.log || echo 0)
          
          echo "nuevos=$NUEVOS" >> $GITHUB_OUTPUT
          echo "actualizados=$ACTUALIZADOS" >> $GITHUB_OUTPUT
          echo "errores=$ERRORES" >> $GITHUB_OUTPUT
          
          # Subir logs como artefacto
          echo "resultado.log" > artifact_files.txt
          echo "anuncios.db" >> artifact_files.txt

      # 8Ô∏è‚É£ Manejo de resultados
      - name: Subir artefactos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bot-results-${{ github.run_number }}
          path: |
            resultado.log
            ${{ env.DB_PATH }}
          retention-days: 3

      # 9Ô∏è‚É£ Actualizaci√≥n de la base de datos
      - name: Actualizar repositorio de datos
        if: steps.run_bot.outputs.exit_code == 0
        env:
          PAT_PUSH: ${{ secrets.PAT_PUSH }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Clonar branch data
          git clone --branch data https://x-access-token:$PAT_PUSH@github.com/$GITHUB_REPOSITORY data-repo
          
          # Actualizar DB
          cp "$DB_PATH" data-repo/anuncios.db
          
          # Commit y push
          cd data-repo
          if ! git diff --quiet; then
            git add anuncios.db
            git commit -m "üîÑ Actualizaci√≥n autom√°tica DB (Run #${{ github.run_number }})"
            git push origin data
            echo "‚úÖ Base de datos actualizada"
          else
            echo "‚ÑπÔ∏è No hay cambios en la base de datos"
          fi

      # üîü Notificaci√≥n de resultados
      - name: Enviar resumen a Telegram
        if: steps.run_bot.outputs.nuevos != '0' || steps.run_bot.outputs.actualizados != '0'
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          RESULTADO="üìä *Resumen Ejecuci√≥n* #${{ github.run_number }}\n\n"
          RESULTADO+="‚Ä¢ üïí Hora: $(date '+%Y-%m-%d %H:%M:%S')\n"
          RESULTADO+="‚Ä¢ ‚úÖ Exit code: ${{ steps.run_bot.outputs.exit_code }}\n"
          RESULTADO+="‚Ä¢ üì• Nuevos: ${{ steps.run_bot.outputs.nuevos }}\n"
          RESULTADO+="‚Ä¢ üîÑ Actualizados: ${{ steps.run_bot.outputs.actualizados }}\n"
          RESULTADO+="‚Ä¢ ‚ùå Errores: ${{ steps.run_bot.outputs.errores }}\n"
          RESULTADO+="‚Ä¢ üì¶ Total en DB: ${{ steps.db_metrics.outputs.total }} ‚Üí $(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM anuncios;")\n"
          RESULTADO+="\nüîó [Ver Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d text="$RESULTADO" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview="true"
