name: Ejecutar Bot Autom√°ticamente

on:
  schedule:
    # Corre cada 2 horas entre 8 AM y 6 PM (UTC-6 Guatemala)
    - cron: '0 14-23/2 * * *'
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      CHAT_ID: ${{ secrets.CHAT_ID }}
      FB_COOKIES_JSON: ${{ secrets.FB_COOKIES_JSON }}
      DB_PATH: upload-artifact/anuncios.db

    steps:
      # 1Ô∏è‚É£ Clonar main
      - name: Checkout main
        uses: actions/checkout@v4  # Actualizado a v4 (m√°s r√°pido)
        with:
          fetch-depth: 1  # Solo el commit m√°s reciente (m√°s r√°pido)

      # 2Ô∏è‚É£ Clonar el branch 'data'
      - name: Checkout branch de datos
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: data
          token: ${{ secrets.PAT_PUSH }}
          path: data
          fetch-depth: 1  # Solo el commit m√°s reciente

      # 3Ô∏è‚É£ Restaurar o iniciar base
      - name: Preparar DB hist√≥rica
        run: |
          mkdir -p upload-artifact
          if [ -f data/anuncios.db ]; then
            cp data/anuncios.db "${{ env.DB_PATH }}"
            echo "‚úÖ Base hist√≥rica cargada"
          else
            echo "‚ö†Ô∏è No hay base previa. Se inicia nueva"
            touch "${{ env.DB_PATH }}"
          fi

      # 4Ô∏è‚É£ Setup Python con cache
      - name: Setup Python con cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Versi√≥n espec√≠fica m√°s r√°pida
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      # 5Ô∏è‚É£ Cache de Playwright browsers (CLAVE para velocidad)
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      # 6Ô∏è‚É£ Crear tabla si no existe y asegurar columna updated_at (sin default)
      - name: Inicializar estructura de la base
        run: |
          sudo apt-get update -qq && sudo apt-get install -y -qq sqlite3

          # Crear la tabla si no exist√≠a (sin updated_at)
          sqlite3 "${{ env.DB_PATH }}" "
            CREATE TABLE IF NOT EXISTS anuncios (
              link TEXT PRIMARY KEY,
              modelo TEXT,
              anio INTEGER,
              precio INTEGER,
              km TEXT,
              fecha_scrape DATE,
              roi REAL,
              score INTEGER
            );
          "

          # Agregar columna updated_at si falta (sin DEFAULT)
          if ! sqlite3 "${{ env.DB_PATH }}" "PRAGMA table_info(anuncios);" | grep -q updated_at; then
            echo "‚úÖ Agregando columna updated_at"
            sqlite3 "${{ env.DB_PATH }}" "
              ALTER TABLE anuncios
              ADD COLUMN updated_at DATE;
            "
          else
            echo "‚ÑπÔ∏è Columna updated_at ya existe"
          fi

      # 7Ô∏è‚É£ Contar anuncios antes del run
      - name: Contar anuncios antes del run
        id: db_prev
        run: |
          echo "üïí Contando anuncios previos..."
          BEFORE=$(sqlite3 "${{ env.DB_PATH }}" 'SELECT COUNT(*) FROM anuncios;')
          echo "before=$BEFORE" >> $GITHUB_OUTPUT

      # 8Ô∏è‚É£ Volumen previo por modelo
      - name: Volumen previo en DB
        run: |
          echo "üìä Anuncios por modelo (previo):"
          sqlite3 "${{ env.DB_PATH }}" \
            "SELECT modelo, COUNT(*) FROM anuncios GROUP BY modelo ORDER BY COUNT(*) DESC;"

      # 9Ô∏è‚É£ Instalar dependencias Python (OPTIMIZADO)
      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip --quiet
          pip install -r requirements.txt --quiet

      # üîü Instalar Playwright SOLO Chromium (OPTIMIZADO)
      - name: Instalar Playwright Chromium
        run: |
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" != "true" ]; then
            echo "üîÑ Cache miss - Instalando Chromium..."
            playwright install chromium --with-deps
          else
            echo "‚úÖ Cache hit - Chromium ya disponible"
            # Verificar que chromium est√© disponible
            playwright install chromium --with-deps --dry-run || playwright install chromium --with-deps
          fi

      # 1Ô∏è‚É£1Ô∏è‚É£ Ejecutar el bot y capturar inserciones
      - name: Ejecutar bot con Telegram
        id: run_bot
        run: |
          python bot_telegram_marketplace.py | tee resultado.log
          NUEVOS=$(grep '^NUEVOS=' resultado.log | cut -d= -f2)
          ACTUALIZADOS=$(grep '^ACTUALIZADOS=' resultado.log | cut -d= -f2)
          echo "nuevos=$NUEVOS" >> $GITHUB_OUTPUT
          echo "actualizados=$ACTUALIZADOS" >> $GITHUB_OUTPUT

      # 1Ô∏è‚É£2Ô∏è‚É£ Guardar nueva versi√≥n de la DB
      - name: Copiar DB al branch data
        run: cp "${{ env.DB_PATH }}" data/anuncios.db

      # 1Ô∏è‚É£3Ô∏è‚É£ Commit & push DB actualizada
      - name: Commit & push DB actualizada
        env:
          PAT_PUSH: ${{ secrets.PAT_PUSH }}
        run: |
          cd data
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${PAT_PUSH}@github.com/${{ github.repository }}
          git add anuncios.db
          if ! git diff --cached --quiet; then
            git commit -m "üîÑ Actualiza DB (run #${{ github.run_number }})"
            git push origin data
          else
            echo "üìÅ Sin cambios detectados en la base, se omite push"
          fi

      # 1Ô∏è‚É£4Ô∏è‚É£ Resumen final del run (robusto con o sin updated_at)
      - name: Resumen final del run
        run: |
          echo "‚úÖ Bot ejecutado con √©xito"
          echo "üìä Anuncios antes del run: ${{ steps.db_prev.outputs.before }}"
          FINAL=$(sqlite3 "${{ env.DB_PATH }}" "SELECT COUNT(*) FROM anuncios;")
          echo "üì¶ Total actual: $FINAL"
          echo "‚ûï Nuevos anuncios agregados: $((FINAL - ${{ steps.db_prev.outputs.before }}))"

          echo "üìà Reporte de inserciones:"
          echo "   ‚Ä¢ Nuevos: ${{ steps.run_bot.outputs.nuevos }}"
          echo "   ‚Ä¢ Actualizados: ${{ steps.run_bot.outputs.actualizados }}"

          # √öltimo anuncio registrado, usando updated_at si existe
          if sqlite3 "${{ env.DB_PATH }}" "PRAGMA table_info(anuncios);" | grep -q updated_at; then
            echo "üîç √öltimo anuncio registrado (por updated_at):"
            sqlite3 "${{ env.DB_PATH }}" \
              "SELECT link, fecha_scrape, updated_at \
               FROM anuncios \
               ORDER BY updated_at DESC, rowid DESC \
               LIMIT 1;"
          else
            echo "üîç √öltimo anuncio registrado (por fecha_scrape):"
            sqlite3 "${{ env.DB_PATH }}" \
              "SELECT link, fecha_scrape \
               FROM anuncios \
               ORDER BY fecha_scrape DESC, rowid DESC \
               LIMIT 1;"
          fi
