name: Ejecutar Bot Automatizado

on:
  schedule:
    # Corre cada 2 horas entre 8 AM y 6 PM (hora de Guatemala GMT-6)
    # Convertido a UTC: 14, 16, 18, 20, 22 UTC.
    # El 00 UTC (medianoche UTC) es 6 PM GMT-6. Si se desea incluir,
    # se podr√≠a a√±adir otra l√≠nea como '- cron: '0 0 * * *''
    - cron: '0 14-23/2 * * *'
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      CHAT_ID: ${{ secrets.CHAT_ID }}
      FB_COOKIES_JSON: ${{ secrets.FB_COOKIES_JSON }}
      DB_PATH: upload-artifact/anuncios.db
      HEADLESS: 'true'

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Configurar base de datos
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$DB_PATH")"
          
          if [ -f data/anuncios.db ]; then
            cp data/anuncios.db "$DB_PATH"
            echo "‚úÖ Base de datos hist√≥rica cargada desde 'data/anuncios.db'. Tama√±o: $(du -h "$DB_PATH" | cut -f1)"
          else
            echo "::warning::No se encontr√≥ una base de datos previa en 'data/anuncios.db'. Se crear√° una nueva."
            touch "$DB_PATH"
          fi

      - name: Instalar SQLite y verificar estructura de DB
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y sqlite3
          
          sqlite3 "$DB_PATH" <<EOF
          PRAGMA journal_mode = WAL;
          PRAGMA foreign_keys = ON;
          BEGIN TRANSACTION;
          CREATE TABLE IF NOT EXISTS anuncios (
            link TEXT PRIMARY KEY NOT NULL,
            modelo TEXT,
            anio INTEGER,
            precio INTEGER,
            km TEXT,
            fecha_scrape TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')),
            roi REAL,
            score INTEGER,
            updated_at TEXT DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')),
            relevante BOOLEAN DEFAULT 0,
            confianza_precio TEXT CHECK(confianza_precio IN ('baja', 'media', 'alta')) DEFAULT 'baja',
            muestra_precio INTEGER DEFAULT 0,
            motivo TEXT
          );
          CREATE INDEX IF NOT EXISTS idx_modelo ON anuncios(modelo);
          CREATE INDEX IF NOT EXISTS idx_fecha ON anuncios(fecha_scrape);
          COMMIT;
          EOF
          echo "‚úÖ Estructura de DB verificada y/o creada."

      - name: Obtener m√©tricas iniciales
        id: db_metrics
        run: |
          set -euo pipefail
          echo "üìä Obteniendo m√©tricas iniciales..."
          
          TOTAL=$(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM anuncios;")
          
          MODELOS_RAW=$(sqlite3 "$DB_PATH" "SELECT modelo || ':' || COUNT(*) FROM anuncios GROUP BY modelo ORDER BY COUNT(*) DESC LIMIT 5;")
          MODELOS=$(echo "$MODELOS_RAW" | paste -sd, -)
          
          echo "total=$TOTAL" >> "$GITHUB_OUTPUT"
          echo "modelos=$MODELOS" >> "$GITHUB_OUTPUT"
          
          echo "üìã Total inicial: $TOTAL anuncios"
          echo "üèÜ Top modelos: $MODELOS"

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
          playwright install --with-deps chromium

      - name: Ejecutar bot de scraping
        id: run_bot
        run: |
          set +e
          
          python -u bot_telegram_marketplace.py 2>&1 | tee resultado.log
          
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
          
          NUEVOS=$(grep -oP 'Anuncios relevantes: \K\d+' resultado.log | tail -1 || echo 0)
          POTENCIALES=$(grep -oP 'Anuncios potenciales: \K\d+' resultado.log | tail -1 || echo 0)
          ERRORES=$(grep -c "Error cr√≠tico" resultado.log || echo 0)
          
          echo "nuevos=$NUEVOS" >> "$GITHUB_OUTPUT"
          echo "potenciales=$POTENCIALES" >> "$GITHUB_OUTPUT"
          echo "errores_ejecucion=$ERRORES" >> "$GITHUB_OUTPUT"
          
          echo "Bot finalizado con exit code: $EXIT_CODE"
          echo "Resumen de ejecuci√≥n: Nuevos: $NUEVOS, Potenciales: $POTENCIALES, Errores: $ERRORES"

      - name: Subir artefactos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-results-${{ github.run_number }}
          path: |
            resultado.log
            ${{ env.DB_PATH }}
          retention-days: 7

      - name: Actualizar repositorio de datos
        if: steps.run_bot.outputs.exit_code == '0'
        env:
          PAT_PUSH: ${{ secrets.PAT_PUSH }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git clone --branch data "https://x-access-token:$PAT_PUSH@github.com/$GITHUB_REPOSITORY" data-repo
          
          cp "$DB_PATH" data-repo/anuncios.db
          
          cd data-repo
          
          if ! git diff --quiet; then
            git add anuncios.db
            git commit -m "üîÑ Actualizaci√≥n autom√°tica DB (Run #${{ github.run_number }}) [skip ci]"
            git push origin data
            echo "‚úÖ Base de datos 'anuncios.db' actualizada en la rama 'data'."
          else
            echo "‚ÑπÔ∏è No se detectaron cambios en la base de datos. No se requiere commit."
          fi
          cd ..

      - name: Enviar resumen final a Telegram
        if: |
          steps.run_bot.outputs.nuevos != '0' ||
          steps.run_bot.outputs.potenciales != '0' ||
          steps.run_bot.outputs.errores_ejecucion != '0' ||
          failure()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail
          
          TOTAL_FINAL=$(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM anuncios;")
          
          RESULTADO="üìä *Resumen de Ejecuci√≥n* #${{ github.run_number }}\n\n"
          RESULTADO+="‚Ä¢ üïí Hora (GT): $(TZ='America/Guatemala' date '+%Y-%m-%d %H:%M:%S')\n"
          RESULTADO+="‚Ä¢ ‚úÖ Estado del Bot: ${{ steps.run_bot.outputs.exit_code == '0' && '√âxito' || 'Fallo' }}\n"
          RESULTADO+="‚Ä¢ üì• Relevantes: ${{ steps.run_bot.outputs.nuevos }}\n"
          RESULTADO+="‚Ä¢ üü° Potenciales: ${{ steps.run_bot.outputs.potenciales }}\n"
          RESULTADO+="‚Ä¢ ‚ùå Errores en ejecuci√≥n: ${{ steps.run_bot.outputs.errores_ejecucion }}\n"
          RESULTADO+="‚Ä¢ üì¶ Total en DB (inicio): ${{ steps.db_metrics.outputs.total }}\n"
          RESULTADO+="‚Ä¢ üìà Total en DB (final): $TOTAL_FINAL\n\n"
          
          if [ -n "${{ steps.db_metrics.outputs.modelos }}" ]; then
            RESULTADO+="‚Ä¢ üèÜ Top Modelos: ${{ steps.db_metrics.outputs.modelos }}\n\n"
          fi
          
          RESULTADO+="üîó [Ver Detalles del Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          # Escapar caracteres especiales para MarkdownV2 en el resumen
          ESCAPED_RESULTADO=$(echo "$RESULTADO" | sed -e 's/_/\\_/g' -e 's/\*/\\*/g' -e 's/\[/\\[/g' -e 's/\]/\\]/g' -e 's/\(/\\(/g' -e 's/\)/\\)/g' -e 's/\~/\\~/g' -e 's/\` /\\\`/g' -e 's/\>/\\>/g' -e 's/\#/\\#/g' -e 's/\+/\\+/g' -e 's/\-/\\-/g' -e 's/=/\\=/g' -e 's/|/\\|/g' -e 's/{/\\{/g' -e 's/}/\\}/g' -e 's/\./\\./g' -e 's/!/\\!/g' )
          
          curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d text="$ESCAPED_RESULTADO" \
            -d parse_mode="MarkdownV2" \
            -d disable_web_page_preview="true"
