name: Ejecutar Bot Autom√°ticamente

on:
  schedule:
    # Corre cada 2 horas entre 8 AM y 6 PM (UTC-6 Guatemala)
    - cron: '0 14-23/2 * * *'
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest

    env:
      BOT_TOKEN:        ${{ secrets.BOT_TOKEN }}
      CHAT_ID:          ${{ secrets.CHAT_ID }}
      FB_COOKIES_JSON:  ${{ secrets.FB_COOKIES_JSON }}
      DB_PATH:          upload-artifact/anuncios.db

    steps:
      # 1Ô∏è‚É£ Checkout del c√≥digo principal
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Checkout del branch donde vive la base hist√≥rica
      - name: Checkout branch de datos
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: data
          path: data

      # 3Ô∏è‚É£ Cargar la base hist√≥rica o crearla si no existe
      - name: Preparar DB hist√≥rica
        run: |
          mkdir -p upload-artifact
          if [ -f data/anuncios.db ]; then
            cp data/anuncios.db "${{ env.DB_PATH }}"
            echo "‚úÖ Base hist√≥rica cargada"
          else
            echo "‚ö†Ô∏è No hay base previa, se inicia una nueva"
            touch "${{ env.DB_PATH }}"
          fi
          
      - name: Inicializar estructura de la base
        run: |
          sudo apt-get install -y sqlite3
          sqlite3 "${{ env.DB_PATH }}" "
          CREATE TABLE IF NOT EXISTS anuncios (
            link TEXT PRIMARY KEY,
            modelo TEXT,
            anio INTEGER,
            precio INTEGER,
            km TEXT,
            fecha_scrape DATE,
            roi REAL,
            score INTEGER
          );
          "

      # 4Ô∏è‚É£ Mostrar contenido actual de la DB antes de correr el bot
      - name: Volumen previo en DB
        run: |
          sudo apt-get update && sudo apt-get install -y sqlite3
          echo "üìä Anuncios por modelo:"
          sqlite3 "${{ env.DB_PATH }}" \
            "SELECT modelo, COUNT(*) FROM anuncios GROUP BY modelo ORDER BY COUNT(*) DESC;"

      # 5Ô∏è‚É£ Instalar dependencias
      - name: Instalar dependencias Python y Playwright
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npx playwright install --with-deps

      # 6Ô∏è‚É£ Ejecutar el bot principal
      - name: Ejecutar bot con Telegram
        run: python bot_telegram_marketplace.py

      # 7Ô∏è‚É£ Copiar DB resultante al branch de datos
      - name: Guardar DB actualizada
        run: cp "${{ env.DB_PATH }}" data/anuncios.db

      # 8Ô∏è‚É£ Commit + push si la DB fue modificada
      - name: Commit & push DB al branch data
        run: |
          cd data
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add anuncios.db
          if ! git diff --cached --quiet; then
            git commit -m "üîÑ Actualiza DB (run #${{ github.run_number }})"
            git push origin data
          else
            echo "üìÅ Sin cambios detectados en la base, se omite el push"
          fi

      # 9Ô∏è‚É£ Resumen final del run
      - name: Resumen final del run
        run: |
          sudo apt-get update && sudo apt-get install -y sqlite3
          echo "‚úÖ Bot ejecutado con √©xito"
          echo "üì¶ Total de anuncios registrados:"
          sqlite3 "${{ env.DB_PATH }}" "SELECT COUNT(*) FROM anuncios;"
          echo "üîç √öltimo anuncio registrado:"
          sqlite3 "${{ env.DB_PATH }}" \
            "SELECT link, fecha_scrape FROM anuncios ORDER BY fecha_scrape DESC, rowid DESC LIMIT 1;"
